# motRegs.substitutions
# For convenience, we create two ports, one has starting address of 0 for
# handling register numbers 0 - 31, the other has starting address 32 for
# handling register numbers 32 - 63.  This is done so that the device support
# can be set to ASYN_MULTIDEVICE and then address is the register number.
# Note, that registers 37,38,39,40,47,48,49, and 50 should only be written
# to RAM area unless these values need to be changed "permanently" to servive
# power cycle.  We write to RAM without setting the code word (0x1235) in
# register 31.
# So, three objects are created for each motor each with a port.  For example
# A2531, A2531B, and A2531C.  Object with port A2531 has the poll loop thread
# which does all periodic work.  The other two objects do all the
# initialization and then just exist quietly.
#-----------------------------------------------------------------------------
file twoMotMove.db
{
pattern {     MD,          M1,          M2}
        { $(M)-1, 2531-1-$(M), 2531-2-$(M)}
        { $(M)-2, 2531-3-$(M), 2531-4-$(M)}
        { $(M)-3, 2531-5-$(M), 2531-6-$(M)}
}
file motordrv.db
{
pattern	{         MOD,    PORT,    PORTB,    PORTC}
	{ 2531-1-$(M), A2531-1, A2531-1B, A2531-1C}
	{ 2531-2-$(M), A2531-2, A2531-2B, A2531-2C}
	{ 2531-3-$(M), A2531-3, A2531-3B, A2531-3C}
	{ 2531-4-$(M), A2531-4, A2531-4B, A2531-4C}
	{ 2531-5-$(M), A2531-5, A2531-5B, A2531-5C}
	{ 2531-6-$(M), A2531-6, A2531-6B, A2531-6C}
}
file motorIn.db
{
pattern	{ ADDR,       DESC,         MOD,    PORT}
	{    0,  "Motor 1", 2531-1-$(M), A2531-1}
	{    0,  "Motor 2", 2531-2-$(M), A2531-2}
	{    0,  "Motor 3", 2531-3-$(M), A2531-3}
	{    0,  "Motor 4", 2531-4-$(M), A2531-4}
	{    0,  "Motor 5", 2531-5-$(M), A2531-5}
	{    0,  "Motor 6", 2531-6-$(M), A2531-6}
}
file motorCtrl.db
{
pattern	{ N, ADDR,         MOD,    PORT, LOPR, HOPR}
	{ 1,    0, 2531-1-$(M), A2531-1,    0,   50}
	{ 1,    0, 2531-2-$(M), A2531-2,    0,   50}
	{ 1,    0, 2531-3-$(M), A2531-3,    0,   50}
	{ 1,    0, 2531-4-$(M), A2531-4,    0,   50}
	{ 1,    0, 2531-5-$(M), A2531-5,    0,   50}
	{ 1,    0, 2531-6-$(M), A2531-6,    0,   50}
}
file bkhAMotLiLo.db
{
pattern	{ ADDR,   DESC,         MOD,    PORT,   ITEM,   USER}
	{    0,  CByte, 2531-1-$(M), A2531-1,  CBYTE,  CBYTE}
	{    0,DataOut, 2531-1-$(M), A2531-1,DATAOUT,DATAOUT}
	{    0,  CWord, 2531-1-$(M), A2531-1,  CWORD,  CWORD}

	{    0,  CByte, 2531-2-$(M), A2531-2,  CBYTE,  CBYTE}
	{    0,DataOut, 2531-2-$(M), A2531-2,DATAOUT,DATAOUT}
	{    0,  CWord, 2531-2-$(M), A2531-2,  CWORD,  CWORD}

	{    0,  CByte, 2531-3-$(M), A2531-3,  CBYTE,  CBYTE}
	{    0,DataOut, 2531-3-$(M), A2531-3,DATAOUT,DATAOUT}
	{    0,  CWord, 2531-3-$(M), A2531-3,  CWORD,  CWORD}

	{    0,  CByte, 2531-4-$(M), A2531-4,  CBYTE,  CBYTE}
	{    0,DataOut, 2531-4-$(M), A2531-4,DATAOUT,DATAOUT}
	{    0,  CWord, 2531-4-$(M), A2531-4,  CWORD,  CWORD}

	{    0,  CByte, 2531-5-$(M), A2531-5,  CBYTE,  CBYTE}
	{    0,DataOut, 2531-5-$(M), A2531-5,DATAOUT,DATAOUT}
	{    0,  CWord, 2531-5-$(M), A2531-5,  CWORD,  CWORD}

	{    0,  CByte, 2531-6-$(M), A2531-6,  CBYTE,  CBYTE}
	{    0,DataOut, 2531-6-$(M), A2531-6,DATAOUT,DATAOUT}
	{    0,  CWord, 2531-6-$(M), A2531-6,  CWORD,  CWORD}
}
file motROReg.db
{
pattern	{ADDR,        DESC,         MOD,    PORT,  ITEM,  USER}
	{   0,   PositionL, 2531-1-$(M),A2531-1B,  POSL, ROREG}
	{   1,   PositionH, 2531-1-$(M),A2531-1B,  POSH, ROREG}
	{   6, Temperature, 2531-1-$(M),A2531-1B,  TEMP, ROREG}
	{   8,        Type, 2531-1-$(M),A2531-1B,  TYPE, ROREG}
	{   9,   FirmwareR, 2531-1-$(M),A2531-1B, FWARE, ROREG}

	{   0,   PositionL, 2531-2-$(M),A2531-2B,  POSL, ROREG}
	{   1,   PositionH, 2531-2-$(M),A2531-2B,  POSH, ROREG}
	{   6, Temperature, 2531-2-$(M),A2531-2B,  TEMP, ROREG}
	{   8,        Type, 2531-2-$(M),A2531-2B,  TYPE, ROREG}
	{   9,   FirmwareR, 2531-2-$(M),A2531-2B, FWARE, ROREG}

        {   0,   PositionL, 2531-3-$(M),A2531-3B,  POSL, ROREG}
        {   1,   PositionH, 2531-3-$(M),A2531-3B,  POSH, ROREG}
        {   6, Temperature, 2531-3-$(M),A2531-3B,  TEMP, ROREG}
        {   8,        Type, 2531-3-$(M),A2531-3B,  TYPE, ROREG}
        {   9,   FirmwareR, 2531-3-$(M),A2531-3B, FWARE, ROREG}

        {   0,   PositionL, 2531-4-$(M),A2531-4B,  POSL, ROREG}
        {   1,   PositionH, 2531-4-$(M),A2531-4B,  POSH, ROREG}
        {   6, Temperature, 2531-4-$(M),A2531-4B,  TEMP, ROREG}
        {   8,        Type, 2531-4-$(M),A2531-4B,  TYPE, ROREG}
        {   9,   FirmwareR, 2531-4-$(M),A2531-4B, FWARE, ROREG}

        {   0,   PositionL, 2531-5-$(M),A2531-5B,  POSL, ROREG}
        {   1,   PositionH, 2531-5-$(M),A2531-5B,  POSH, ROREG}
        {   6, Temperature, 2531-5-$(M),A2531-5B,  TEMP, ROREG}
        {   8,        Type, 2531-5-$(M),A2531-5B,  TYPE, ROREG}
        {   9,   FirmwareR, 2531-5-$(M),A2531-5B, FWARE, ROREG}

        {   0,   PositionL, 2531-6-$(M),A2531-6B,  POSL, ROREG}
        {   1,   PositionH, 2531-6-$(M),A2531-6B,  POSH, ROREG}
        {   6, Temperature, 2531-6-$(M),A2531-6B,  TEMP, ROREG}
        {   8,        Type, 2531-6-$(M),A2531-6B,  TYPE, ROREG}
        {   9,   FirmwareR, 2531-6-$(M),A2531-6B, FWARE, ROREG}
}
file motRWReg.db
{
pattern	{ADDR,        DESC,         MOD,    PORT, R,  ITEM,  USER}
	{   2,SetPositionL, 2531-1-$(M),A2531-1B, R, SPOSL,RWRREG}
	{   3,SetPositionH, 2531-1-$(M),A2531-1B, R, SPOSH,RWRREG}
	{   4,        Page, 2531-1-$(M),A2531-1B, R,  PAGE,RWRREG}
	{   7,     Command, 2531-1-$(M),A2531-1B, R,  CMND,RWRREG}
	{  31,    CodeWord, 2531-1-$(M),A2531-1B, R, CODEW,RWRREG}

	{   2,SetPositionL, 2531-2-$(M),A2531-2B, R, SPOSL,RWRREG}
	{   3,SetPositionH, 2531-2-$(M),A2531-2B, R, SPOSH,RWRREG}
	{   4,        Page, 2531-2-$(M),A2531-2B, R,  PAGE,RWRREG}
	{   7,     Command, 2531-2-$(M),A2531-2B, R,  CMND,RWRREG}
	{  31,    CodeWord, 2531-2-$(M),A2531-2B, R, CODEW,RWRREG}

        {   2,SetPositionL, 2531-3-$(M),A2531-3B, R, SPOSL,RWRREG}
        {   3,SetPositionH, 2531-3-$(M),A2531-3B, R, SPOSH,RWRREG}
        {   4,        Page, 2531-3-$(M),A2531-3B, R,  PAGE,RWRREG}
        {   7,     Command, 2531-3-$(M),A2531-3B, R,  CMND,RWRREG}
        {  31,    CodeWord, 2531-3-$(M),A2531-3B, R, CODEW,RWRREG}

        {   2,SetPositionL, 2531-4-$(M),A2531-4B, R, SPOSL,RWRREG}
        {   3,SetPositionH, 2531-4-$(M),A2531-4B, R, SPOSH,RWRREG}
        {   4,        Page, 2531-4-$(M),A2531-4B, R,  PAGE,RWRREG}
        {   7,     Command, 2531-4-$(M),A2531-4B, R,  CMND,RWRREG}
        {  31,    CodeWord, 2531-4-$(M),A2531-4B, R, CODEW,RWRREG}

        {   2,SetPositionL, 2531-5-$(M),A2531-5B, R, SPOSL,RWRREG}
        {   3,SetPositionH, 2531-5-$(M),A2531-5B, R, SPOSH,RWRREG}
        {   4,        Page, 2531-5-$(M),A2531-5B, R,  PAGE,RWRREG}
        {   7,     Command, 2531-5-$(M),A2531-5B, R,  CMND,RWRREG}
        {  31,    CodeWord, 2531-5-$(M),A2531-5B, R, CODEW,RWRREG}

        {   2,SetPositionL, 2531-6-$(M),A2531-6B, R, SPOSL,RWRREG}
        {   3,SetPositionH, 2531-6-$(M),A2531-6B, R, SPOSH,RWRREG}
        {   4,        Page, 2531-6-$(M),A2531-6B, R,  PAGE,RWRREG}
        {   7,     Command, 2531-6-$(M),A2531-6B, R,  CMND,RWRREG}
        {  31,    CodeWord, 2531-6-$(M),A2531-6B, R, CODEW,RWRREG}
}
file motRWReg.db
{
pattern	{ADDR,        DESC,         MOD,    PORT, R,  ITEM,  USER}
	{   6,     MinVelo, 2531-1-$(M),A2531-1C, R,  MINV,RWRREG}
	{   7,     MaxVelo, 2531-1-$(M),A2531-1C, R,  MAXV,RWRREG}
	{   8,    MaxAccel, 2531-1-$(M),A2531-1C, R,  MAXA,RWRREG}
	{  15, LoadAnglThr, 2531-1-$(M),A2531-1C, R, LANTH,RWRREG}
	{  18,  EmergAccel, 2531-1-$(M),A2531-1C, R,  EACC,RWRREG}
	{  26,    MaxDecel, 2531-1-$(M),A2531-1C, R,  MAXD,RWRREG}

	{   6,     MinVelo, 2531-2-$(M),A2531-2C, R,  MINV,RWRREG}
	{   7,     MaxVelo, 2531-2-$(M),A2531-2C, R,  MAXV,RWRREG}
	{   8,    MaxAccel, 2531-2-$(M),A2531-2C, R,  MAXA,RWRREG}
	{  15, LoadAnglThr, 2531-2-$(M),A2531-2C, R, LANTH,RWRREG}
	{  18,  EmergAccel, 2531-2-$(M),A2531-2C, R,  EACC,RWRREG}
	{  26,    MaxDecel, 2531-2-$(M),A2531-2C, R,  MAXD,RWRREG}

        {   6,     MinVelo, 2531-3-$(M),A2531-3C, R,  MINV,RWRREG}
        {   7,     MaxVelo, 2531-3-$(M),A2531-3C, R,  MAXV,RWRREG}
        {   8,    MaxAccel, 2531-3-$(M),A2531-3C, R,  MAXA,RWRREG}
        {  15, LoadAnglThr, 2531-3-$(M),A2531-3C, R, LANTH,RWRREG}
        {  18,  EmergAccel, 2531-3-$(M),A2531-3C, R,  EACC,RWRREG}
        {  26,    MaxDecel, 2531-3-$(M),A2531-3C, R,  MAXD,RWRREG}

        {   6,     MinVelo, 2531-4-$(M),A2531-4C, R,  MINV,RWRREG}
        {   7,     MaxVelo, 2531-4-$(M),A2531-4C, R,  MAXV,RWRREG}
        {   8,    MaxAccel, 2531-4-$(M),A2531-4C, R,  MAXA,RWRREG}
        {  15, LoadAnglThr, 2531-4-$(M),A2531-4C, R, LANTH,RWRREG}
        {  18,  EmergAccel, 2531-4-$(M),A2531-4C, R,  EACC,RWRREG}
        {  26,    MaxDecel, 2531-4-$(M),A2531-4C, R,  MAXD,RWRREG}

        {   6,     MinVelo, 2531-5-$(M),A2531-5C, R,  MINV,RWRREG}
        {   7,     MaxVelo, 2531-5-$(M),A2531-5C, R,  MAXV,RWRREG}
        {   8,    MaxAccel, 2531-5-$(M),A2531-5C, R,  MAXA,RWRREG}
        {  15, LoadAnglThr, 2531-5-$(M),A2531-5C, R, LANTH,RWRREG}
        {  18,  EmergAccel, 2531-5-$(M),A2531-5C, R,  EACC,RWRREG}
        {  26,    MaxDecel, 2531-5-$(M),A2531-5C, R,  MAXD,RWRREG}

        {   6,     MinVelo, 2531-6-$(M),A2531-6C, R,  MINV,RWRREG}
        {   7,     MaxVelo, 2531-6-$(M),A2531-6C, R,  MAXV,RWRREG}
        {   8,    MaxAccel, 2531-6-$(M),A2531-6C, R,  MAXA,RWRREG}
        {  15, LoadAnglThr, 2531-6-$(M),A2531-6C, R, LANTH,RWRREG}
        {  18,  EmergAccel, 2531-6-$(M),A2531-6C, R,  EACC,RWRREG}
        {  26,    MaxDecel, 2531-6-$(M),A2531-6C, R,  MAXD,RWRREG}
}
file motRWReg.db
{
pattern	{ADDR,        DESC,         MOD,    PORT, R,  ITEM,  USER}
	{   0,     Feature, 2531-1-$(M),A2531-1C, E,  FEAT,RWEREG}
	{   1,   Steps/Rev, 2531-1-$(M),A2531-1C, E, FMOST,RWEREG}
	{   2, EncoderStep, 2531-1-$(M),A2531-1C, E, ESTEP,RWEREG}
	{   3, MaxCurrentA, 2531-1-$(M),A2531-1C, E, MAXCA,RWEREG}
	{   4, MaxCurrentB, 2531-1-$(M),A2531-1C, E, MAXCB,RWEREG}
	{   6, MinVelocity, 2531-1-$(M),A2531-1C, E,  MINV,RWEREG}
	{   7, MaxVelocity, 2531-1-$(M),A2531-1C, E,  MAXV,RWEREG}
	{   8,    MaxAccel, 2531-1-$(M),A2531-1C, E,  MAXA,RWEREG}
	{   9, AccelThresh, 2531-1-$(M),A2531-1C, E, ACCTH,RWEREG}
	{  14,    StepSize, 2531-1-$(M),A2531-1C, E, STPSZ,RWEREG}
	{  15, LoadAnglThr, 2531-1-$(M),A2531-1C, E, LANTH,RWEREG}
	{  18,  EmergAccel, 2531-1-$(M),A2531-1C, E,  EACC,RWEREG}
	{  20,    Feature2, 2531-1-$(M),A2531-1C, E, FEAT2,RWEREG}
	{  23, RefPositioL, 2531-1-$(M),A2531-1C, E, REFPL,RWEREG}
	{  24, RefPositioH, 2531-1-$(M),A2531-1C, E, REFPH,RWEREG}

        {   0,     Feature, 2531-2-$(M),A2531-2C, E,  FEAT,RWEREG}
        {   1,   Steps/Rev, 2531-2-$(M),A2531-2C, E, FMOST,RWEREG}
        {   2, EncoderStep, 2531-2-$(M),A2531-2C, E, ESTEP,RWEREG}
        {   3, MaxCurrentA, 2531-2-$(M),A2531-2C, E, MAXCA,RWEREG}
        {   4, MaxCurrentB, 2531-2-$(M),A2531-2C, E, MAXCB,RWEREG}
        {   6, MinVelocity, 2531-2-$(M),A2531-2C, E,  MINV,RWEREG}
        {   7, MaxVelocity, 2531-2-$(M),A2531-2C, E,  MAXV,RWEREG}
        {   8,    MaxAccel, 2531-2-$(M),A2531-2C, E,  MAXA,RWEREG}
        {   9, AccelThresh, 2531-2-$(M),A2531-2C, E, ACCTH,RWEREG}
        {  14,    StepSize, 2531-2-$(M),A2531-2C, E, STPSZ,RWEREG}
        {  15, LoadAnglThr, 2531-2-$(M),A2531-2C, E, LANTH,RWEREG}
        {  18,  EmergAccel, 2531-2-$(M),A2531-2C, E,  EACC,RWEREG}
        {  20,    Feature2, 2531-2-$(M),A2531-2C, E, FEAT2,RWEREG}
        {  23, RefPositioL, 2531-2-$(M),A2531-2C, E, REFPL,RWEREG}
        {  24, RefPositioH, 2531-2-$(M),A2531-2C, E, REFPH,RWEREG}

        {   0,     Feature, 2531-3-$(M),A2531-3C, E,  FEAT,RWEREG}
        {   1,   Steps/Rev, 2531-3-$(M),A2531-3C, E, FMOST,RWEREG}
        {   2, EncoderStep, 2531-3-$(M),A2531-3C, E, ESTEP,RWEREG}
        {   3, MaxCurrentA, 2531-3-$(M),A2531-3C, E, MAXCA,RWEREG}
        {   4, MaxCurrentB, 2531-3-$(M),A2531-3C, E, MAXCB,RWEREG}
        {   6, MinVelocity, 2531-3-$(M),A2531-3C, E,  MINV,RWEREG}
        {   7, MaxVelocity, 2531-3-$(M),A2531-3C, E,  MAXV,RWEREG}
        {   8,    MaxAccel, 2531-3-$(M),A2531-3C, E,  MAXA,RWEREG}
        {   9, AccelThresh, 2531-3-$(M),A2531-3C, E, ACCTH,RWEREG}
        {  14,    StepSize, 2531-3-$(M),A2531-3C, E, STPSZ,RWEREG}
        {  15, LoadAnglThr, 2531-3-$(M),A2531-3C, E, LANTH,RWEREG}
        {  18,  EmergAccel, 2531-3-$(M),A2531-3C, E,  EACC,RWEREG}
        {  20,    Feature2, 2531-3-$(M),A2531-3C, E, FEAT2,RWEREG}
        {  23, RefPositioL, 2531-3-$(M),A2531-3C, E, REFPL,RWEREG}
        {  24, RefPositioH, 2531-3-$(M),A2531-3C, E, REFPH,RWEREG}

        {   0,     Feature, 2531-4-$(M),A2531-4C, E,  FEAT,RWEREG}
        {   1,   Steps/Rev, 2531-4-$(M),A2531-4C, E, FMOST,RWEREG}
        {   2, EncoderStep, 2531-4-$(M),A2531-4C, E, ESTEP,RWEREG}
        {   3, MaxCurrentA, 2531-4-$(M),A2531-4C, E, MAXCA,RWEREG}
        {   4, MaxCurrentB, 2531-4-$(M),A2531-4C, E, MAXCB,RWEREG}
        {   6, MinVelocity, 2531-4-$(M),A2531-4C, E,  MINV,RWEREG}
        {   7, MaxVelocity, 2531-4-$(M),A2531-4C, E,  MAXV,RWEREG}
        {   8,    MaxAccel, 2531-4-$(M),A2531-4C, E,  MAXA,RWEREG}
        {   9, AccelThresh, 2531-4-$(M),A2531-4C, E, ACCTH,RWEREG}
        {  14,    StepSize, 2531-4-$(M),A2531-4C, E, STPSZ,RWEREG}
        {  15, LoadAnglThr, 2531-4-$(M),A2531-4C, E, LANTH,RWEREG}
        {  18,  EmergAccel, 2531-4-$(M),A2531-4C, E,  EACC,RWEREG}
        {  20,    Feature2, 2531-4-$(M),A2531-4C, E, FEAT2,RWEREG}
        {  23, RefPositioL, 2531-4-$(M),A2531-4C, E, REFPL,RWEREG}
        {  24, RefPositioH, 2531-4-$(M),A2531-4C, E, REFPH,RWEREG}

        {   0,     Feature, 2531-5-$(M),A2531-5C, E,  FEAT,RWEREG}
        {   1,   Steps/Rev, 2531-5-$(M),A2531-5C, E, FMOST,RWEREG}
        {   2, EncoderStep, 2531-5-$(M),A2531-5C, E, ESTEP,RWEREG}
        {   3, MaxCurrentA, 2531-5-$(M),A2531-5C, E, MAXCA,RWEREG}
        {   4, MaxCurrentB, 2531-5-$(M),A2531-5C, E, MAXCB,RWEREG}
        {   6, MinVelocity, 2531-5-$(M),A2531-5C, E,  MINV,RWEREG}
        {   7, MaxVelocity, 2531-5-$(M),A2531-5C, E,  MAXV,RWEREG}
        {   8,    MaxAccel, 2531-5-$(M),A2531-5C, E,  MAXA,RWEREG}
        {   9, AccelThresh, 2531-5-$(M),A2531-5C, E, ACCTH,RWEREG}
        {  14,    StepSize, 2531-5-$(M),A2531-5C, E, STPSZ,RWEREG}
        {  15, LoadAnglThr, 2531-5-$(M),A2531-5C, E, LANTH,RWEREG}
        {  18,  EmergAccel, 2531-5-$(M),A2531-5C, E,  EACC,RWEREG}
        {  20,    Feature2, 2531-5-$(M),A2531-5C, E, FEAT2,RWEREG}
        {  23, RefPositioL, 2531-5-$(M),A2531-5C, E, REFPL,RWEREG}
        {  24, RefPositioH, 2531-5-$(M),A2531-5C, E, REFPH,RWEREG}

        {   0,     Feature, 2531-6-$(M),A2531-6C, E,  FEAT,RWEREG}
        {   1,   Steps/Rev, 2531-6-$(M),A2531-6C, E, FMOST,RWEREG}
        {   2, EncoderStep, 2531-6-$(M),A2531-6C, E, ESTEP,RWEREG}
        {   3, MaxCurrentA, 2531-6-$(M),A2531-6C, E, MAXCA,RWEREG}
        {   4, MaxCurrentB, 2531-6-$(M),A2531-6C, E, MAXCB,RWEREG}
        {   6, MinVelocity, 2531-6-$(M),A2531-6C, E,  MINV,RWEREG}
        {   7, MaxVelocity, 2531-6-$(M),A2531-6C, E,  MAXV,RWEREG}
        {   8,    MaxAccel, 2531-6-$(M),A2531-6C, E,  MAXA,RWEREG}
        {   9, AccelThresh, 2531-6-$(M),A2531-6C, E, ACCTH,RWEREG}
        {  14,    StepSize, 2531-6-$(M),A2531-6C, E, STPSZ,RWEREG}
        {  15, LoadAnglThr, 2531-6-$(M),A2531-6C, E, LANTH,RWEREG}
        {  18,  EmergAccel, 2531-6-$(M),A2531-6C, E,  EACC,RWEREG}
        {  20,    Feature2, 2531-6-$(M),A2531-6C, E, FEAT2,RWEREG}
        {  23, RefPositioL, 2531-6-$(M),A2531-6C, E, REFPL,RWEREG}
        {  24, RefPositioH, 2531-6-$(M),A2531-6C, E, REFPH,RWEREG}
}
