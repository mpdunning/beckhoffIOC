#!../../bin/linux-x86/bkh

< envPaths

cd ${TOP}

dbLoadDatabase "dbd/bkh.dbd"
bkh_registerRecordDeviceDriver pdbbase

epicsEnvSet("N","5")

save_restoreSet_status_prefix( "")
save_restoreSet_IncompleteSetsOk( 1)
save_restoreSet_DatedBackupFiles( 1)
set_savefile_path( "/nfs/slac/g/testfac/esb/$(IOC)","autosave")
set_pass0_restoreFile( "bkh$(N).sav")
set_pass1_restoreFile( "bkh$(N).sav")

drvAsynIPPortConfigure( "BKH$(N)","sioc-asta-bk05:502",0,0,1)
#drvAsynIPPortConfigure( "BKH$(N)","172.27.240.15:502",0,0,1)
#drvAsynIPPortConfigure( "BKH$(N)","192.168.0.100:502",0,0,1)

asynSetTraceIOMask( "BKH$(N)",0,4)
#asynSetTraceMask( "BKH$(N)",0,0x9)

modbusInterposeConfig( "BKH$(N)",0,1000)
drvModbusAsynConfigure("BKH$(N)_CPL_R0","BKH$(N)",0,3,0x1000, 7,0,1000,"9x")
drvModbusAsynConfigure("BKH$(N)_CPL_R1","BKH$(N)",0,3,0x100a, 3,0,1000,"9x")
drvModbusAsynConfigure("BKH$(N)_CPL_R2","BKH$(N)",0,3,0x1010, 4,0,1000,"9x")
drvModbusAsynConfigure("BKH$(N)_CPL_R3","BKH$(N)",0,3,0x1020, 1,0,1000,"9x")
drvModbusAsynConfigure("BKH$(N)_CPL_W1","BKH$(N)",0,6,0x110a, 2,0,1000,"9xrw")
drvModbusAsynConfigure("BKH$(N)_CPL_W2","BKH$(N)",0,6,0x1120, 4,0,1000,"9xrw")
drvModbusAsynConfigure("BKH$(N)_3408",  "BKH$(N)",0,3,     0,16,0, 100,"3408")
drvModbusAsynConfigure("BKH$(N)_3182",  "BKH$(N)",0,3,    16,32,0, 100,"3182")
drvModbusAsynConfigure("BKH$(N)_1512",  "BKH$(N)",0,3,    48, 4,0, 100,"1512")
drvModbusAsynConfigure("BKH$(N)_3464",  "BKH$(N)",0,3,    52, 8,0, 100,"3464")
drvModbusAsynConfigure("BKH$(N)_1408",  "BKH$(N)",0,2,     0, 8,0,1000,"1408")
drvModbusAsynConfigure("BKH$(N)_3408_W","BKH$(N)",0,6, 0x800,16,0,1000,"3408")
drvModbusAsynConfigure("BKH$(N)_3182_W","BKH$(N)",0,6, 0x810,32,0,1000,"3182")
drvModbusAsynConfigure("BKH$(N)_1512_W","BKH$(N)",0,6, 0x830, 4,0,1000,"1512")
drvModbusAsynConfigure("BKH$(N)_3464_W","BKH$(N)",0,6, 0x834, 8,0,1000,"3464")

asynSetTraceIOMask( "BKH$(N)_3408_W",0,4)
#asynSetTraceMask( "BKH$(N)_3408_W",0,0x9)

dbLoadRecords( "db/bkh$(N).db","P=ASTA,M=$(N)")
dbLoadRecords( "db/bkhx-9000.db","P=ASTA,M=$(N)")
dbLoadRecords( "db/bkhxRegs.db","P=ASTA,M=$(N)")
dbLoadRecords( "db/bkhxWRegs.db","P=ASTA,M=$(N)")

cd ${AUTOSAVE}
dbLoadRecords( "db/save_restoreStatus.db","P=ASTA:")

cd ${TOP}/iocBoot/${IOC}
iocInit

dbpf ASTA:LO:BKH5:RW23 0

create_monitor_set( "bkh$(N).req",30,"P=ASTA,M=$(N)")
